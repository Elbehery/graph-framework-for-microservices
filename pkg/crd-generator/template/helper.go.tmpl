package helper

import (
    "context"
    "crypto/sha1"
    "encoding/hex"
    "fmt"
    "github.com/elliotchance/orderedmap"

    datamodel "{{.CrdModulePath}}/client/clientset/versioned"
    metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const DEFAULT_KEY = "default"

func GetCRDParentsMap() map[string][]string {
    return {{.GetCrdParentsMap}}
}

func GetObjectByCRDName(dmClient *datamodel.Clientset, crdName string, name string) interface{} {
	{{.GetObjectByCRDName}}

    return nil
}

func ParseCRDLabels(crdName string, labels map[string]string) *orderedmap.OrderedMap {
    parents := GetCRDParentsMap()[crdName]

    m := orderedmap.NewOrderedMap()
    for _, parent := range parents {
        if label, ok := labels[parent]; ok {
            m.Set(parent, label)
        } else {
            m.Set(parent, DEFAULT_KEY)
        }
    }

    return m
}

func GetHashedName(crdName string, labels map[string]string) string {
    orderedLabels := ParseCRDLabels(crdName, labels)

    var name string
    for i, key := range orderedLabels.Keys() {
        value, _ := orderedLabels.Get(key)

        name += fmt.Sprintf("%s:%s", key, value)
        if i < orderedLabels.Len()-1 {
            name += "/"
        }
    }

    h := sha1.New()
    h.Write([]byte(name))
    return hex.EncodeToString(h.Sum(nil))
}
