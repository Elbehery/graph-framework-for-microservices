/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "gitlab.eng.vmware.com/nexus/compiler/_generated/apis/gns.tsm.tanzu.vmware.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GnsLister helps list Gnses.
// All objects returned here must be treated as read-only.
type GnsLister interface {
	// List lists all Gnses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Gns, err error)
	// Gnses returns an object that can list and get Gnses.
	Gnses(namespace string) GnsNamespaceLister
	GnsListerExpansion
}

// gnsLister implements the GnsLister interface.
type gnsLister struct {
	indexer cache.Indexer
}

// NewGnsLister returns a new GnsLister.
func NewGnsLister(indexer cache.Indexer) GnsLister {
	return &gnsLister{indexer: indexer}
}

// List lists all Gnses in the indexer.
func (s *gnsLister) List(selector labels.Selector) (ret []*v1.Gns, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Gns))
	})
	return ret, err
}

// Gnses returns an object that can list and get Gnses.
func (s *gnsLister) Gnses(namespace string) GnsNamespaceLister {
	return gnsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GnsNamespaceLister helps list and get Gnses.
// All objects returned here must be treated as read-only.
type GnsNamespaceLister interface {
	// List lists all Gnses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Gns, err error)
	// Get retrieves the Gns from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Gns, error)
	GnsNamespaceListerExpansion
}

// gnsNamespaceLister implements the GnsNamespaceLister
// interface.
type gnsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Gnses in the indexer for a given namespace.
func (s gnsNamespaceLister) List(selector labels.Selector) (ret []*v1.Gns, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Gns))
	})
	return ret, err
}

// Get retrieves the Gns from the indexer for a given namespace and name.
func (s gnsNamespaceLister) Get(name string) (*v1.Gns, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gns"), name)
	}
	return obj.(*v1.Gns), nil
}
